/*
Input: arr[] = {5, 2, 7} 
Output: 1 
The only valid pair is (arr[0], arr[2]) as 7 – 5 = 2 – 0 = 2.
Input: arr[] = {1, 2, 3, 4} 
Output: 6 
*/
import java.util.*;

public class GFG{

static int MAXN = 100000;

// Function to count required
// number of pairs
    static int countPairs(int arr[], int n)
    {
     
        // To store the frequencies
        // of (arr[i] - i)
        HashMap<Integer,Integer> map = new HashMap<Integer,Integer>();
        for (int i = 0; i < n; i++)
            map.put(arr[i] - i, 0);
        System.out.println(map);
        
        for (int i = 0; i < n; i++)
            map.put(arr[i] - i, map.get(arr[i] - i) + 1);
            System.out.println(map);
        // To store the required count
        int res = 0;
        for (int x : map.values())
        {
            int cnt = x;
     
            // If cnt is the number of elements
            // whose differecne with their index
            // is same then ((cnt * (cnt - 1)) / 2)
            // such pairs are possible
            res += ((cnt * (cnt - 1)) / 2);
        }
     
        return res;
    }

// Driver Code
public static void main (String[] args)
{
	
        int arr[] = { 1, 5, 6, 7, 9 };
        int n = arr.length;
     
        System.out.println(countPairs(arr, n));
}
}