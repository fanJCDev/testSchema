import java.util.*;
/*
To solve this problem we can use partition method of Quick Sort but this would not preserve the original relative 
order of the nodes in each of the two partitions.
Below is the algorithm to solve this problem : 
 

Initialize first and last nodes of below three linked lists as NULL. 
Linked list of values smaller than x.
Linked list of values equal to x.
Linked list of values greater than x.
Now iterate through the original linked list. If a nodeâ€™s value is less than x then append it at the end of the 
smaller list. If the value is equal to x, then at the end of the equal list. And if a value is greater, then at the 
end of the greater list.
Now concatenate three lists.
*/
public class LinkedList
{
    static class Node
    {
        int data;
        Node next;
        Node(int key)
        {
            data=key;
            next=null;
        }
    }
    Node head;

    public static LinkedList insert(LinkedList list, int key)
    {
        /*
        ye node jadidi misazim
        node badiye node_jadido be null mibandim
        age list ma khali bashe:
            sare listemono be node jadid vasl mikonim
        ama ageh liste ma khali nabood pas bayad be tahe list ezafe konim:
            node_curr ro be sare list vasl mikonim
            ta zamani ke node_curr be tahe list naresideh:
                node_curr ro be node badi node_curr vasl mikonim
            hala ke be tah residim:
                node_jadid ro be node badi node_curr ke be null vasl bood vasl mikonim
                node badi node jadidam ke otomat be null vasle
        list ro ke be nude_curr vasl bod ro barmigardonim
            
        */
        Node new_nod = new Node(key);
        new_nod.next=null;
        if(list.head==null){
            list.head=new_nod;
        }else{
            Node curr = list.head;
            while(curr.next!=null){
                curr=curr.next;
            }
            curr.next=new_nod;
        }
        return list;
    }
    public static void print(LinkedList list)
    {
        /*
            node_curr ro misazim ke be sare list vasl bashe
            ta zamani ke node_curr be null nareside:
                data ye node_curr ro chaap mikonim
                node_curr ro yedone mibarim jolo
            ye khte khali mizanim
        */
        Node curr = list.head;
        while(curr!=null){
            if(curr.next==null){
                System.out.print(curr.data);
                break;
            }
            System.out.print(curr.data+"->");
            curr=curr.next;
        }
        System.out.println();
    }
//**********************************************************************************
static Node partition(Node head, int x)
{
     
    /* Let us initialize first and last nodes of three linked lists
        1) Linked list of values smaller than x.
        2) Linked list of values equal to x.
        3) Linked list of values greater than x.*/
    Node smallerHead = null, smallerLast = null;
    Node greaterLast = null, greaterHead = null;
    Node equalHead = null, equalLast =null;
 
    // Now iterate original list and connect nodes of appropriate linked lists.
    while (head != null)
    {
        // If current node is equal to x, append it to the list of x values
        if (head.data == x)
        {
            if (equalHead == null)
                equalHead = equalLast = head;
            else
            {
                equalLast.next = head;
                equalLast = equalLast.next;
            }
        }
 
        // If current node is less than X, append it to the list of smaller values
        else if (head.data < x)
        {
            if (smallerHead == null)
                smallerLast = smallerHead = head;
            else
            {
                smallerLast.next = head;
                smallerLast = head;
            }
        }
        else // Append to the list of greater values
        {
            if (greaterHead == null)
                greaterLast = greaterHead = head;
            else
            {
                greaterLast.next = head;
                greaterLast = head;
            }
        }
        head = head.next;
    }
 
    // Fix end of greater linked list to NULL if this list has some nodes
    if (greaterLast != null)
        greaterLast.next = null;
 
    // Connect three lists If smaller list is empty
    if (smallerHead == null)
    {
        if (equalHead == null)
            return greaterHead;
        equalLast.next = greaterHead;
        return equalHead;
    }
 
    // If smaller list is not empty  and equal list is empty
    if (equalHead == null)
    {
        smallerLast.next = greaterHead;
        return smallerHead;
    }
 
    // If both smaller and equal list are non-empty
    smallerLast.next = equalHead;
    equalLast.next = greaterHead;
    return smallerHead;
}
//**********************************************************************************
    
    public static void main(String[] args){
        LinkedList list = new LinkedList();
            list=insert(list,5);
            list=insert(list,3);
            list=insert(list,10);
            list=insert(list,1);
            list=insert(list,5);
            list=insert(list,6);
            list=insert(list,2);
            list=insert(list,2);
            list=insert(list,1);
            print(list);
    	    int x = 4;
            list.head = partition(list.head, x);
            System.out.println("Linked List after deletion of middle");
            print(list);
    }
}


//**********************************************************************************
