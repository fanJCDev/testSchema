import java.util.*;
/*
Complexity Analysis:  

Time complexity: O(n). 
Only one traversal of the loop is needed.
Auxiliary Space:O(1). 
There is no space required.
*/
public class LinkedList
{
    static class Node
    {
        int data;
        Node next;
        Node(int key)
        {
            data=key;
            next=null;
        }
    }
    Node head;
  

    public static LinkedList insert(LinkedList list, int key)
    {
        Node new_nod = new Node(key);
        new_nod.next=null;
        if(list.head==null)
        {
            list.head=new_nod;
        }else
        {
            Node curr = list.head;
            while(curr.next!=null)
            {
                curr=curr.next;
            }
            curr.next=new_nod;
        }
        return list;
    }

//******************************************************************************
void detectLoop()
    {
        Node slow_p = head, fast_p = head;
        int flag = 0;
        while (slow_p != null && fast_p != null
               && fast_p.next != null) {
            slow_p = slow_p.next;
            fast_p = fast_p.next.next;
            if (slow_p == fast_p) {
                flag = 1;
                break;
            }
        }
        if (flag == 1)
            System.out.println("Loop found");
        else
            System.out.println("Loop not found");
    }
//**********************************************************************************
    
    public static void main(String[] args)
    {
        LinkedList list1 = new LinkedList();LinkedList list2 = new LinkedList();

            list=insert(list,20);
            list=insert(list,4);
list=insert(list,15);list=insert(list,10);
            list.head.next.next.next.next = llist.head;
 
            list.detectLoop();
    }
}


//**********************************************************************************




