import java.util.*;
/*
Time Complexity: O(n) 
Auxiliary Space: O(1)  
METHOD 2 (By reversing the list) 
This method takes O(n) time and O(1) extra space. 
1) Get the middle of the linked list. 
2) Reverse the second half of the linked list. 
3) Check if the first half and second half are identical. 
4) Construct the original linked list by reversing the second half again and attaching it back to the first half

To divide the list into two halves, method 2 of this post is used. 

When a number of nodes are even, the first and second half contain exactly half nodes. The challenging thing 
in this method is to handle the case when the number of nodes is odd. We don’t want the middle node as part of 
the lists as we are going to compare them for equality. For odd cases, we use a separate variable ‘midnode’. 
*/
public class LinkedList
{
    static class Node
    {
        int data;
        Node next;
        Node(int key)
        {
            data=key;
            next=null;
        }
    }
    Node head;
    static Node slow_ptr, fast_ptr, second_half;

    public static LinkedList insert(LinkedList list, int key)
    {
        Node new_nod = new Node(key);
        new_nod.next=null;
        if(list.head==null)
        {
            list.head=new_nod;
        }else
        {
            Node curr = list.head;
            while(curr.next!=null)
            {
                curr=curr.next;
            }
            curr.next=new_nod;
        }
        return list;
    }

//******************************************************************************
    static void reverse()
    {
        Node prev = null;
        Node current = second_half;
        Node next;
        while (current != null)
        {
            next = current.next;//1
            current.next = prev;//2
            prev = current;//tasbite 2
            current = next;//tasbit 1
        }
        second_half = prev;
    }
//**********************************************************************************
    static boolean compareLists(Node head1, Node head2)
    {
        Node temp1 = head1;
        Node temp2 = head2;
 
        while (temp1 != null && temp2 != null)
        {
            if (temp1.data == temp2.data)
            {
                temp1 = temp1.next;
                temp2 = temp2.next;
            }
            else
                return false;
        }
 
        /* Both are empty reurn 1*/
        if (temp1 == null && temp2 == null)
            return true;
 
        /* Will reach here when one is NULL
           and other is not */
        return false;
    }
//**********************************************************************************
    static boolean isPalindrome(Node head)
    {
        slow_ptr = head;
        fast_ptr = head;
        Node prev_of_slow_ptr = head;
        Node midnode = null; // To handle odd size list
        boolean res = true; // initialize result
 
        if (head != null && head.next != null)
        {
            while (fast_ptr != null && fast_ptr.next != null)
            {
                fast_ptr = fast_ptr.next.next;
 
                /*We need previous of the slow_ptr for
                  linked lists  with odd elements */
                prev_of_slow_ptr = slow_ptr;
                slow_ptr = slow_ptr.next;
            }
 
            /* fast_ptr would become NULL when there are even elements
               in the list and not NULL for odd elements. We need to skip 
               the middle node for odd case and store it somewhere so that
               we can restore the original list */
            if (fast_ptr != null)
            {
                midnode = slow_ptr;
                slow_ptr = slow_ptr.next;
            }
 
            // Now reverse the second half and compare it with first half
            second_half = slow_ptr;
            prev_of_slow_ptr.next = null; // NULL terminate first half
            reverse(); // Reverse the second half
            res = compareLists(head, second_half); // compare
 
            /* Construct the original list back */
            reverse(); // Reverse the second half again
 
            if (midnode != null)
            {
                // If there was a mid node (odd size case) which
                // was not part of either first half or second half.
                prev_of_slow_ptr.next = midnode;
                midnode.next = second_half;
            }
            else
                prev_of_slow_ptr.next = second_half;
        }
        return res;
    }
//**********************************************************************************
    
    public static void main(String[] args)
    {
        LinkedList list1 = new LinkedList();

            list1=insert(list1,1);
            list1=insert(list1,2);
            list1=insert(list1,3);
            list1=insert(list1,4);
            list1=insert(list1,4);
            list1=insert(list1,2);
            list1=insert(list1,1);

            

            if (list1.isPalindrome(list1.head) != false)
            {
                System.out.println("Is Palindrome");
                System.out.println("");
            }
            else
            {
                System.out.println("Not Palindrome");
                System.out.println("");
            }
    }
}


//**********************************************************************************
