import java.util.*;
/*
Method 3(Using difference of node counts) 

Get count of the nodes in the first list, let count be c1.
Get count of the nodes in the second list, let count be c2.
Get the difference of counts d = abs(c1 â€“ c2)
Now traverse the bigger list from the first node till d nodes so that from here onwards both the lists have equal no of nodes
Then we can traverse both the lists in parallel till we come across a common node. (Note that getting a common node is done by comparing the address of the nodes)
Time Complexity: O(m+n) 
Auxiliary Space: O(1)
*/
public class LinkedList
{
    static class Node
    {
        int data;
        Node next;
        Node(int key)
        {
            data=key;
            next=null;
        }
    }
    Node head;
  

    public static LinkedList insert(LinkedList list, int key)
    {
        Node new_nod = new Node(key);
        new_nod.next=null;
        if(list.head==null)
        {
            list.head=new_nod;
        }else
        {
            Node curr = list.head;
            while(curr.next!=null)
            {
                curr=curr.next;
            }
            curr.next=new_nod;
        }
        return list;
    }

//******************************************************************************
  /*function to get the intersection point of two linked
    lists head1 and head2 */
    static int getNode(Node head1 , Node head2)
    {
        int c1 = getCount(head1);
        int c2 = getCount(head2);
        
        int d;
 
        if (c1 > c2)
        {
            d = c1 - c2;
            System.out.println(d);
            return getIntesectionNode(d, head1, head2);
        }
        else//c1<=c2
        {
            d = c2 - c1;
            return getIntesectionNode(d, head2, head1);
        }
    }
 
    /* function to get the intersection point of two linked
     lists head1 and head2 where head1 has d more nodes than
     head2 */
    static int getIntesectionNode(int d, Node node1, Node node2)
    {
        int i;
        Node current1 = node1;
        Node current2 = node2;
        for (i = 0; i < d; i++)
        {
            if (current1 == null)
            {
                return -1;
            }
            current1 = current1.next;
        }
        while (current1 != null && current2 != null)
        {
            if (current1.data == current2.data)
            {
                
                return current1.data;
            }
            current1 = current1.next;
            //current2 = current2.next;
        }
 
        return -1;
    }
 
    /*Takes head pointer of the linked list and returns the count of nodes in the list*/
    static int getCount(Node node)
    {
        Node current = node;
        int count = 0;
 
        while (current != null)
        {
            count++;
            current = current.next;
        }
 
        return count;
    }
//**********************************************************************************
    
    public static void main(String[] args)
    {
        LinkedList list1 = new LinkedList();LinkedList list2 = new LinkedList();
        list1=insert(list1,4);
        list2=insert(list2,4);

        System.out.println("The node of intersection is " + getNode(list1.head,list2.head));
    }
}


//**********************************************************************************
