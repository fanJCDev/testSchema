/* Class containing left and right child of current
node and key value*/
import java.util.*;
class Node {
    int value;
    Node left;
    Node right;
 
    Node(int value) {
        this.value = value;
        right = null;
        left = null;
    }
}
    
public class BinaryTree {
 
    Node root;
 
    private Node addRecursive(Node node, int value) {
    if (node == null) {
        return new Node(value);
    }
    if (value < node.value){
        if(node.left!=null){
            node.left = addRecursive(node.left, value);
        }else{
            System.out.println("  Inserted " + value + " to left of "+ node.value);
            node.left = new Node(value);
        }
    }else if(value > node.value){
        if(node.right!=null){
            node.right = addRecursive(node.right, value);
        }else{
            System.out.println("  Inserted " + value + " to right of "+ node.value);
            node.right = new Node(value);
        }
    }else{
        return node;
    }
    return node;
    }


    void add(int value) {
        root = addRecursive(root, value);
    }

    void inOrderTraversal(Node n){
     if (n != null)
     {
     	inOrderTraversal(n.left);
     	System.out.println(n.value);
     	inOrderTraversal(n.right);
     }
    }	
    boolean isFullTree(Node node){
    	// if empty tree
    	if(node == null)
    	return true;
    	
    	// if leaf node
    	if(node.left == null && node.right == null )
    		return true;
    	
    	// if both left and right subtrees are not null
    	// the are full
    	if((node.left!=null) && (node.right!=null))
    		return (isFullTree(node.left) && isFullTree(node.right));
    	
    	// if none work
    	return false;
    }
    void checktree(Node node){
        if(isFullTree(node))
			System.out.print("The binary tree is full");
		else
			System.out.print("The binary tree is not full");
    }
	public static void main(String[] args)
	{
		BinaryTree tree = new BinaryTree();

		tree.add(5);
		tree.add(7);
     
        tree.add(9);
        tree.add(11);
        tree.add(12);

		tree.inOrderTraversal(tree.root);
		tree.checktree(tree.root);
	}
}
