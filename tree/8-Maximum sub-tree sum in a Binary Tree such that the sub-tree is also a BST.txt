import java.util.*;
class Node {
    int value;
    Node left;
    Node right;
    boolean isThreaded;
    
    Node(int value) {
        this.value = value;
        right = null;
        left = null;
    }
}
class Info {
 
    // Max Value in the subtree
    int max;
 
    // Min value in the subtree
    int min;
 
    // If subtree is BST
    boolean isBST;
 
    // Sum of the nodes of the sub-tree
    // rooted under the current node
    int sum;
 
    // Max sum of BST found till now
    int currmax;
     
    Info(int m,int mi,boolean is,int su,int cur)
    {
        max = m;
        min = mi;
        isBST = is;
        sum = su;
        currmax = cur;
    }
    Info(){}
}
class INT {
    int a;
}    
public class BinaryTree {
 
    Node root;
 
    private Node addRecursive(Node node, int value) {
    if (node == null) {
        return new Node(value);
    }
    if (value < node.value){
        if(node.left!=null){
            node.left = addRecursive(node.left, value);
        }else{
            System.out.println("  Inserted " + value + " to left of "+ node.value);
            node.left = new Node(value);
        }
    }else if(value > node.value){
        if(node.right!=null){
            node.right = addRecursive(node.right, value);
        }else{
            System.out.println("  Inserted " + value + " to right of "+ node.value);
            node.right = new Node(value);
        }
    }else{
        return node;
    }
    return node;
    }
    void add(int value) {
        root = addRecursive(root, value);
    }
    void inOrderTraversal(Node n){
     if (n != null)
     {
     	inOrderTraversal(n.left);
     	System.out.println(n.value);
     	inOrderTraversal(n.right);
     }
    }	
    //**************************
    static Info MaxSumBSTUtil( Node root, INT maxsum){
        // Base case
        if (root == null)
            return new Info( Integer.MIN_VALUE, Integer.MAX_VALUE, true, 0, 0 );
     
        // If current node is a leaf node then
        // return from the function and store
        // information about the leaf node
        // Returns information about subtree such as
        // subtree with the maximum sum which is also a BST
        if (root.left == null && root.right == null){
            maxsum.a = Math.max(maxsum.a, root.value);
            return new Info( root.value, root.value, true, root.value, maxsum.a );
        }
        
        // Store information about the left subtree
        Info L = MaxSumBSTUtil(root.left, maxsum);
        // Store information about the right subtree
        Info R = MaxSumBSTUtil(root.right, maxsum);  
        Info BST=new Info();
        
        
        // If the subtree rooted under the current node is a BST
        
        if (L.isBST && R.isBST && L.max < root.value && R.min > root.value){
            BST.max = Math.max(root.value, Math.max(L.max, R.max));
            BST.min = Math.min(root.value, Math.min(L.min, R.min));
            maxsum.a = Math.max(maxsum.a, R.sum + root.value + L.sum);
            BST.sum = R.sum + root.value + L.sum;
     
            // Update the current maximum sum
            BST.currmax = maxsum.a;
     
            BST.isBST = true;
            return BST;
        } 
        // If the whole tree is not a BST then update the current maximum sum
        BST.isBST = false;
        BST.currmax = maxsum.a;
        BST.sum = R.sum + root.value + L.sum;
        return BST;
    }
    static int MaxSumBST( Node root){
        INT maxsum = new INT();
        maxsum.a = Integer.MIN_VALUE;
        return MaxSumBSTUtil(root, maxsum).currmax;
    }
    
    //**************************
    
	public static void main(String[] args){
		BinaryTree t = new BinaryTree();

		t.add(5);
        t.add(14);
        t.add(3);
        t.add(6);
        t.add(7);
        t.add(9);
        t.add(1);

		t.inOrderTraversal(t.root);
        System.out.println("\n\n-->"+ MaxSumBST(t.root));
        /*
        Node root = new Node(5);
        root.left = new Node(14);
        root.right = new Node(3);
        root.left.left = new Node(6);
        root.right.right = new Node(7);
        root.left.left.left = new Node(9);
        root.left.left.right = new Node(1);

		inOrderTraversal(root);
        System.out.println("\n\n-->"+ MaxSumBST(root));
        */
	}
}
