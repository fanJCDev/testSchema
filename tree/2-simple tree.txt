/* Class containing left and right child of current
node and key value*/
import java.util.*;
class Node {
    int value;
    Node left;
    Node right;
 
    Node(int value) {
        this.value = value;
        right = null;
        left = null;
    }
}
    
public class BinaryTree {
 
    Node root;
 
    private Node addRecursive(Node node, int value) {
    if (node == null) {
        return new Node(value);
    }
    if (value < node.value){
        if(node.left!=null){
            node.left = addRecursive(node.left, value);
        }else{
            System.out.println("  Inserted " + value + " to left of "+ node.value);
            node.left = new Node(value);
        }
    }else if(value > node.value){
        if(node.right!=null){
            node.right = addRecursive(node.right, value);
        }else{
            System.out.println("  Inserted " + value + " to right of "+ node.value);
            node.right = new Node(value);
        }
    }else{
        return node;
    }
    return node;
    }


public void add(int value) {
    root = addRecursive(root, value);
}

void inOrderTraversal(Node n)
    {
     if (n != null)
     {
     	inOrderTraversal(n.left);
     	System.out.println(n.value);
     	inOrderTraversal(n.right);
     }
    }	

	public static void main(String[] args)
	{
		BinaryTree tree = new BinaryTree();

		tree.add(2);
		tree.add(3);
        tree.add(1);
        tree.add(4);
        tree.add(5);
        tree.add(9);
        tree.add(7);
        tree.add(8);
        tree.add(6);

		tree.inOrderTraversal(tree.root);
	}
}
