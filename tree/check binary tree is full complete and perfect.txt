/* Class containing left and right child of current
node and key value*/
import java.util.*;

// A Java program to introduce Binary Tree
// Java program to check if binary tree is full or not

/* Tree node structure */
class Node
{
	int data;
	Node left, right;

	Node(int item)
	{
		data = item;
		left = right = null;
	}
}

public class BinaryTree
{
	Node root;
	public  Node addRecursive(Node current, int value) {
	    if (current == null) {
            return new Node(value);
	    }
        if (value < current.data) {
            current.left = addRecursive(current.left, value);
        } else if (value > current.data) {
            current.right = addRecursive(current.right, value);
        } else {
            // value already exists
            return current;
        }
        return current;
    }
	
	//***************************************************************
	public void inOrderTraversal(Node n)
    {
        System.out.println("\n");
        if (n != null)
        {
        	inOrderTraversal(n.left);
        	System.out.print(n.data+" ");
         	inOrderTraversal(n.right);
        }
    }
	//*******************************************************************
	/* this function checks if a binary tree is full or not */
	public boolean isFullTree(Node node)
	{
		// if empty tree
		if(node == null)
		return true;
		// if leaf node
		if(node.left == null && node.right == null )
			return true;
		// if both left and right subtrees are not null
		// the are full
		if((node.left!=null) && (node.right!=null))
			return (isFullTree(node.left) && isFullTree(node.right));
		// if none work
		return false;
	}
	//*******************************************************************
	public boolean checkComplete(Node root, int index, int numberNodes)
	{
	    // Check if the tree is empty
        if (root == null)
          return true;
        if (index >= numberNodes)
          return false;
        return (checkComplete(root.left, 2 * index + 1, numberNodes)
            && checkComplete(root.right, 2 * index + 2, numberNodes));
    }
	//*******************************************************************
    public int countNumNodes(Node root)
    {
        if (root == null)
          return (0);
        return (1 + countNumNodes(root.left) + countNumNodes(root.right));
    }
     //******************************************
    public static int depth(Node node)
    {
        int d = 0;
        while (node != null)
        {
          d++;
          node = node.left;
        }
        return d;
    }
    // Check if the tree is perfect binary tree
    public static boolean is_perfect(Node root, int d, int level)
    {
        // Check if the tree is empty
        if (root == null)
            return true;
        // If for children
        if (root.left == null && root.right == null)
            return (d == level + 1);
        if (root.left == null || root.right == null)
            return false;
         return is_perfect(root.left, d, level + 1) && is_perfect(root.right, d, level + 1);
  }
  // Wrapper function
  public static boolean is_Perfect(Node root)
  {
    int d = depth(root);
    return is_perfect(root, d, 0);
  }
  //*********************************************************
  // Driver program
  public static void main(String args[])
  {
      BinaryTree tree = new BinaryTree();
      tree.root=tree.addRecursive(
          tree.addRecursive(
              tree.addRecursive(
                  tree.addRecursive(
                      tree.addRecursive(
                          tree.addRecursive(
                              tree.addRecursive(
                                  tree.addRecursive(
                                      tree.addRecursive(
                                      tree.root, 5), 70), 10), 80), 50), 60), 20), 40), 30);/*
      tree.root = new Node(10);
	  tree.root.left = new Node(20);
	  tree.root.right = new Node(30);
	  tree.root.left.right = new Node(40);
	  tree.root.left.left = new Node(50);
	  tree.root.right.left = new Node(60);
	  tree.root.right.right = new Node(70);
	  tree.root.left.left.left = new Node(80);
	  tree.root.left.left.right = new Node(90);
	  tree.root.left.right.left = new Node(80);
	  tree.root.left.right.right = new Node(90);
	  tree.root.right.left.left = new Node(80);
	  tree.root.right.left.right = new Node(90);
	  tree.root.right.right.left = new Node(80);
	  tree.root.right.right.right = new Node(90);*/
	  if(tree.isFullTree(tree.root))
			System.out.print("The binary tree is full\n");
	  else
	    System.out.print("The binary tree is not full\n");
      int tt=tree.countNumNodes(tree.root);
      System.out.println(tt);
	  if(tree.checkComplete(tree.root,0,tree.countNumNodes(tree.root)))
		System.out.println("The tree is a complete binary tree\n");
	  else 
		System.out.println("The tree is not a complete binary tree\n");
	  if(tree.is_Perfect(tree.root))
		System.out.println("The tree is a perfect binary tree\n");
	  else 
		System.out.println("The tree is not a perfect binary tree\n");
	  tree.inOrderTraversal(tree.root);
  }
}
