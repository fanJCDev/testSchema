// Java implementation to check if
// characters of a given string can
// be rearranged to form a palindrome
import java.io.*;
import java.math.*;
import java.util.*;

public class GFG {

	static int NO_OF_CHARS = 256;

	static boolean canFormPalindrome(String str)//O(n)
	{
		List<Character> list = new ArrayList<Character>();
		for (int i = 0; i < str.length(); i++)
		{
			if (list.contains(str.charAt(i)))
				list.remove((Character)str.charAt(i));
			else
				list.add(str.charAt(i));
		}

		if (str.length() % 2 == 0 && list.isEmpty()|| (str.length() % 2 == 1 && list.size()== 1))
			return true;

		else
			return false;
	}
	static boolean canFormPalindrome1(String str)//O(n^2)
	{

		int count[] = new int[NO_OF_CHARS];
		Arrays.fill(count, 0);

		for (int i = 0; i < str.length(); i++)
			count[str.charAt(i)]++;


		int odd = 0;
		for (int i = 0; i < NO_OF_CHARS; i++) {
			if ((count[i] & 1) == 1)
				odd++;

			if (odd > 1)
				return false;
		}

		return true;
	}
	static void checker(String str)
	{
	    if (canFormPalindrome(str))
			System.out.println("Yes");
		else
			System.out.println("No");
	}

	public static void main(String args[])
	{
        checker("121212353121212");
		checker("geeksogeeks");
	}
}

