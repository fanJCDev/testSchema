  /**
   * Animal Shelter: Animals are given out in a LIFO basis. Adopters can choose between
   *   cat or dog.
   *
   * Assumptions:
   *   can use java.util.LinkedList
   *
   * Time complexity and Space complexity:
   *   Enqueues are O(1) because it's just the end linked list.
   *   Dequeues are O(1) since we just check which of the two queues to look at.
   *
   * If I were to expand on this, I'm probably have a pet type to queue map. So I could look
   * up the different animals more easily. Maybe also the dequeue method could take a collection
   * of possible animals that the adopter would like.
   */
  import java.util.*;
  public class AnimalShelter {

    public enum AnimalType
    {
        DOG, CAT 
    }

    private int animalId;
    LinkedList<Integer> cats;
    LinkedList<Integer> dogs;

    public AnimalShelter()
    {
        cats = new LinkedList<Integer>();
        dogs = new LinkedList<Integer>();
    }

    public void enqueue(AnimalType type)
    {
        switch(type)
        {
            case DOG:
                dogs.add(animalId);
                animalId++;
                System.out.println("A DOG Added");
                break;
            case CAT:
                System.out.println("A CAT Added");
                cats.add(animalId);
                animalId++;
                break;
        }
    }
    public Integer dequeueCat()
    {
        if(cats.isEmpty()) throw new NoSuchElementException("There are no cats in the animal shelter.");
        System.out.println("Cat adopted");
        return cats.pop();
    }

    public Integer dequeueDog()
    {
        if(dogs.isEmpty()) throw new NoSuchElementException("There are no dogs in the animal shelter");
        System.out.println("Dog adopted");        
        return dogs.pop();
    }

    public Integer dequeueAny()
    {
        if(dogs.isEmpty() && cats.isEmpty()) throw new NoSuchElementException("There are no animals in the animal shelter.");
        if(dogs.isEmpty())
        {
            System.out.println("Cat adopted");
            return cats.pop();
        }
        else if(cats.isEmpty())
        {
            System.out.println("Dog adopted");
            return dogs.pop();
        } 
        else
        {
            if(cats.peek() < dogs.peek()){
                System.out.println("Cat adopted");
                return cats.pop();
            }
            else{
                System.out.println("Dog adopted");
                return dogs.pop();
            }
        }
    }
    public static void main(String[] args){// dogs = 0 2 4 6// cats = 1 3 5 7
        AnimalShelter shelter = new AnimalShelter();
        for(int i = 0; i < 4; i++){
                shelter.enqueue(AnimalType.DOG);
                shelter.enqueue(AnimalType.CAT);

            }

        for(int i = 0; i < 10; i++){
                System.out.println(shelter.dequeueAny());
            }
    }
}